---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: app-docker-build
  namespace: {{ .Release.Namespace }}
spec:
  resources:
    inputs:
      - name: application-repo
        type: git
    outputs:
      - name: docker-image
        type: image
  params:
    - name: pathToDockerFile
      description: Path to Dockerfile
      default: $(resources.inputs.application-repo.path)/app/Dockerfile
    - name: pathToContext
      description: The build context used by Kaniko
      default: $(resources.inputs.application-repo.path)/app

  stepTemplate:
    envFrom:
      - configMapRef:
          name: tekton-docker-cm
  steps:
    - name: build-and-push
      image: {{ .Values.kaniko_image }}:{{ .Values.kaniko_tag }}
      env:
        - name: "DOCKER_CONFIG"
          value: "/builder/home/.docker/"
      command:
        - /kaniko/executor
      args:
        - --dockerfile=$(params.pathToDockerFile)
        - --destination=$(resources.outputs.docker-image.url)/$(DOCKER_TEST_NAMESPACE)/$(DOCKER_IMAGE_NAME):$(DOCKER_TAG)
        - --context=$(params.pathToContext)
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: app-docker-security-scan
  namespace: {{ .Release.Namespace }}
spec:
  resources:
    inputs:
      - name: docker-image
        type: image

  stepTemplate:
    envFrom:
      - configMapRef:
          name: tekton-docker-cm
  steps:
    - name: trivy-security-scan
      image: {{ .Values.trivy_image }}:{{ .Values.trivy_tag }}
      env:
        - name: "DOCKER_CONFIG"
          value: "/builder/home/.docker/"
        - name: TRIVY_USERNAME
          valueFrom:
            secretKeyRef:
              name: harbor-docker-secret
              key: username
        - name: TRIVY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: harbor-docker-secret
              key: password
      command:
        - "/bin/sh"
      args:
        - "-c"
        - "trivy image --no-progress --severity \"HIGH,CRITICAL\" --exit-code 1 $(resources.inputs.docker-image.url)/$(DOCKER_TEST_NAMESPACE)/$(DOCKER_IMAGE_NAME):$(DOCKER_TAG)"
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: app-docker-promote-image
  namespace: {{ .Release.Namespace }}
spec:
  resources:
    inputs:
      - name: docker-image
        type: image
  stepTemplate:
    envFrom:
      - configMapRef:
          name: tekton-docker-cm
  steps:
    - image: docker
      name: docker-promote
      env:
        - name: "DOCKER_CONFIG"
          value: "/builder/home/.docker/"
        - name: DOCKER_USERNAME
          valueFrom:
            secretKeyRef:
              name: harbor-docker-secret
              key: username
        - name: DOCKER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: harbor-docker-secret
              key: password
      command: ["/bin/sh", "-c"]
      args:
        - docker login --username $(DOCKER_USERNAME) --password $(DOCKER_PASSWORD) $(resources.inputs.docker-image.url);
          docker pull $(resources.inputs.docker-image.url)/$(DOCKER_TEST_NAMESPACE)/$(DOCKER_IMAGE_NAME):$(DOCKER_TAG);
          docker tag $(resources.inputs.docker-image.url)/$(DOCKER_TEST_NAMESPACE)/$(DOCKER_IMAGE_NAME):$(DOCKER_TAG) $(resources.inputs.docker-image.url)/$(DOCKER_PROD_NAMESPACE)/$(DOCKER_IMAGE_NAME):$(DOCKER_TAG);
          docker push $(resources.inputs.docker-image.url)/$(DOCKER_PROD_NAMESPACE)/$(DOCKER_IMAGE_NAME):$(DOCKER_TAG)
      volumeMounts:
        - mountPath: /var/run/
          name: dind-socket
  sidecars:
    - image: docker:18.09.9-dind
      name: server
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/lib/docker
          name: dind-storage
        - mountPath: /var/run/
          name: dind-socket
  volumes:
    - name: dind-storage
      emptyDir: {}
    - name: dind-socket
      emptyDir: {}
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: argocd-app-sync
  namespace: {{ .Release.Namespace }}
spec:
  stepTemplate:
    envFrom:
      - configMapRef:
          name: tekton-argocd-cm
      - configMapRef:
          name: tekton-docker-cm
  steps:
    - name: app-sync
      image: argoproj/argocd:{{ .Values.argocd_version }}
      env:
        - name: ARGOCD_USERNAME
          valueFrom:
            secretKeyRef:
              name: argocd-login-secret
              key: username
        - name: ARGOCD_PASSWORD
          valueFrom:
            secretKeyRef:
              name: argocd-login-secret
              key: password
      script: |
        argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD
        argocd app set $ARGOCD_APPLICATION_NAME --helm-set-string --helm-set-string app_deploy.image_tag=$DOCKER_TAG
        argocd app sync $ARGOCD_APPLICATION_NAME --server $ARGOCD_SERVER --prune
